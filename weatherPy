{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Unit 6 | Assignment - What's the Weather Like?\n",
    "\n",
    "# ## Background\n",
    "\n",
    "# Whether financial, political, or social -- data's true power lies in its ability to answer questions definitively. So let's take what you've learned about Python requests, APIs, and JSON traversals to answer a fundamental question: \"What's the weather like as we approach the equator?\"\n",
    "\n",
    "# Now, we know what you may be thinking: _\"Duh. It gets hotter...\"_\n",
    "\n",
    "# But, if pressed, how would you **prove** it?\n",
    "\n",
    "# ![Equator](Images/equatorsign.png)\n",
    "\n",
    "# ## WeatherPy\n",
    "\n",
    "# In this example, you'll be creating a Python script to visualize the weather of 500+ cities across the world of varying distance from the equator. To accomplish this, you'll be utilizing a [simple Python library](https://pypi.python.org/pypi/citipy), the [OpenWeatherMap API](https://openweathermap.org/api), and a little common sense to create a representative model of weather across world cities.\n",
    "\n",
    "# Your objective is to build a series of scatter plots to showcase the following relationships:\n",
    "\n",
    "# * Temperature (F) vs. Latitude\n",
    "# * Humidity (%) vs. Latitude\n",
    "# * Cloudiness (%) vs. Latitude\n",
    "# * Wind Speed (mph) vs. Latitude\n",
    "\n",
    "# Your final notebook must:\n",
    "\n",
    "# * Randomly select **at least** 500 unique (non-repeat) cities based on latitude and longitude.\n",
    "# * Perform a weather check on each of the cities using a series of successive API calls.\n",
    "# * Include a print log of each city as it's being processed with the city number and city name.\n",
    "# * Save both a CSV of all data retrieved and png images for each scatter plot.\n",
    "\n",
    "# As final considerations:\n",
    "\n",
    "# * You must complete your analysis using a Jupyter notebook.\n",
    "# * You must use the Matplotlib or Pandas plotting libraries.\n",
    "# * You must include a written description of three observable trends based on the data.\n",
    "# * You must use proper labeling of your plots, including aspects like: Plot Titles (with date of analysis) and Axes Labels.\n",
    "# * See [Example Solution](WeatherPy_Example.pdf) for a reference on expected format.\n",
    "\n",
    "# ## Hints and Considerations\n",
    "\n",
    "# * You may want to start this assignment by refreshing yourself on the [geographic coordinate system](http://desktop.arcgis.com/en/arcmap/10.3/guide-books/map-projections/about-geographic-coordinate-systems.htm).\n",
    "\n",
    "# * Next, spend the requisite time necessary to study the OpenWeatherMap API. Based on your initial study, you should be able to answer  basic questions about the API: Where do you request the API key? Which Weather API in particular will you need? What URL endpoints does it expect? What JSON structure does it respond with? Before you write a line of code, you should be aiming to have a crystal clear understanding of your intended outcome.\n",
    "\n",
    "# * A starter code for Citipy has been provided. However, if you're craving an extra challenge, push yourself to learn how it works: [citipy Python library](https://pypi.python.org/pypi/citipy). Before you try to incorporate the library into your analysis, start by creating simple test cases outside your main script to confirm that you are using it correctly. Too often, when introduced to a new library, students get bogged down by the most minor of errors -- spending hours investigating their entire code -- when, in fact, a simple and focused test would have shown their basic utilization of the library was wrong from the start. Don't let this be you!\n",
    "\n",
    "# * Part of our expectation in this challenge is that you will use critical thinking skills to understand how and why we're recommending the tools we are. What is Citipy for? Why would you use it in conjunction with the OpenWeatherMap API? How would you do so?\n",
    "\n",
    "# * In building your script, pay attention to the cities you are using in your query pool. Are you getting coverage of the full gamut of latitudes and longitudes? Or are you simply choosing 500 cities concentrated in one region of the world? Even if you were a geographic genius, simply rattling 500 cities based on your human selection would create a biased dataset. Be thinking of how you should counter this. (Hint: Consider the full range of latitudes).\n",
    "\n",
    "# * Lastly, remember -- this is a challenging activity. Push yourself! If you complete this task, then you can safely say that you've gained a strong mastery of the core foundations of data analytics and it will only go better from here. Good luck!\n",
    "\n",
    "# ## Copyright"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import time\n",
    "from pprint import pprint\n",
    "# Import API key\n",
    "import api_keys\n",
    "\n",
    "# Incorporated citipy to determine city based on latitude and longitude\n",
    "from citipy import citipy\n",
    "\n",
    "# Output File (CSV)\n",
    "output_data_file = \"output_data/cities.csv\"\n",
    "\n",
    "# Range of latitudes and longitudes\n",
    "lat_range = (-90, 90)\n",
    "lng_range = (-180, 180)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "612"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List for holding lat_lngs and cities\n",
    "lat_lngs = []\n",
    "cities = []\n",
    "lat = []\n",
    "\n",
    "# Create a set of random lat and lng combinations\n",
    "lats = np.random.uniform(low=-90.000, high=90.000, size=1500)\n",
    "lngs = np.random.uniform(low=-180.000, high=180.000, size=1500)\n",
    "lat_lngs = zip(lats, lngs)\n",
    "\n",
    "# Identify nearest city for each lat, lng combination\n",
    "for lat_lng in lat_lngs:\n",
    "    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name\n",
    "    \n",
    "    # If the city is unique, then add it to a our cities list\n",
    "    if city not in cities:\n",
    "        cities.append(city)\n",
    "\n",
    "# Print the city count to confirm sufficient count\n",
    "len(cities)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'base': 'stations',\n",
      " 'clouds': {'all': 75},\n",
      " 'cod': 200,\n",
      " 'coord': {'lat': -35.28, 'lon': 149.13},\n",
      " 'dt': 1537993800,\n",
      " 'id': 2172517,\n",
      " 'main': {'humidity': 100,\n",
      "          'pressure': 1021,\n",
      "          'temp': 37.4,\n",
      "          'temp_max': 37.4,\n",
      "          'temp_min': 37.4},\n",
      " 'name': 'City',\n",
      " 'sys': {'country': 'AU',\n",
      "         'id': 8226,\n",
      "         'message': 0.0032,\n",
      "         'sunrise': 1537904802,\n",
      "         'sunset': 1537948994,\n",
      "         'type': 1},\n",
      " 'visibility': 9000,\n",
      " 'weather': [{'description': 'fog', 'icon': '50n', 'id': 741, 'main': 'Fog'}],\n",
      " 'wind': {'deg': 140, 'speed': 5.82}}\n"
     ]
    }
   ],
   "source": [
    "# OpenWeatherMap API Key\n",
    "api_key = api_keys.api_key\n",
    "\n",
    "# Starting URL for Weather Map API Call\n",
    "url = \"http://api.openweathermap.org/data/2.5/weather?units=Imperial&APPID=\" + api_key \n",
    "query_url = \"http://api.openweathermap.org/data/2.5/weather?units=Imperial&APPID=\" + api_key + \"&q=city\"\n",
    "response = requests.get(query_url)\n",
    "response_json = response.json()\n",
    "pprint(response_json)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "392\n",
      "6529\n",
      "7171\n",
      "1965\n",
      "5326\n",
      "818\n",
      "4642\n",
      "28\n",
      "4805\n",
      "3278\n",
      "5528\n",
      "2088\n",
      "8340\n",
      "5951\n",
      "7022\n",
      "1983\n",
      "3558\n",
      "7584\n",
      "3555\n",
      "7706\n",
      "4791\n",
      "4651\n",
      "6591\n",
      "5950\n",
      "3326\n",
      "5474\n",
      "58\n",
      "5141\n",
      "5266\n",
      "4165\n",
      "6836\n",
      "4343\n",
      "492\n",
      "4806\n",
      "4655\n",
      "5957\n",
      "3996\n",
      "7115\n",
      "391\n",
      "503\n",
      "8242\n",
      "3829\n",
      "4160\n",
      "3467\n",
      "5971\n",
      "7001\n",
      "5674\n",
      "5929\n",
      "3919\n",
      "7267\n",
      "392\n",
      "5830\n",
      "8195\n",
      "628\n",
      "5343\n",
      "3406\n",
      "5119\n",
      "6729\n",
      "3605\n",
      "337\n",
      "3499\n",
      "7058\n",
      "5070\n",
      "4245\n",
      "4469\n",
      "5800\n",
      "3661\n",
      "5323\n",
      "8215\n",
      "8343\n",
      "5271\n",
      "8163\n",
      "3983\n",
      "5349\n",
      "7239\n",
      "828\n",
      "4498\n",
      "8195\n",
      "4405\n",
      "8115\n",
      "7514\n",
      "6975\n",
      "4016\n",
      "4361\n",
      "7676\n",
      "813\n",
      "6299\n",
      "7304\n",
      "3547\n",
      "1509\n",
      "6729\n",
      "1772\n",
      "5985\n",
      "8343\n",
      "3322\n",
      "4465\n",
      "980\n",
      "4371\n",
      "3785\n",
      "5961\n",
      "3965\n",
      "7573\n",
      "5628\n",
      "5341\n",
      "4355\n",
      "1925\n",
      "5948\n",
      "5520\n",
      "386\n",
      "3535\n",
      "8000\n",
      "8341\n",
      "3955\n",
      "5040\n",
      "4769\n",
      "5450\n",
      "6043\n",
      "7985\n",
      "3267\n",
      "4356\n",
      "4791\n",
      "4368\n",
      "399\n",
      "8219\n",
      "8001\n",
      "4769\n",
      "3656\n",
      "4205\n",
      "8332\n",
      "3585\n",
      "1664\n",
      "7275\n",
      "8343\n",
      "4196\n",
      "5408\n",
      "5604\n",
      "5959\n",
      "7323\n",
      "3965\n",
      "3383\n",
      "5390\n",
      "58\n",
      "3590\n",
      "8127\n",
      "5732\n",
      "3449\n",
      "2462\n",
      "4643\n",
      "113\n",
      "5881\n",
      "1499\n",
      "4592\n",
      "5276\n",
      "6984\n",
      "5296\n",
      "3513\n",
      "5055\n",
      "1807\n",
      "4546\n",
      "5488\n",
      "490\n",
      "5427\n",
      "5500\n",
      "5126\n",
      "7446\n",
      "7268\n",
      "4313\n",
      "4753\n",
      "6729\n",
      "6787\n",
      "7505\n",
      "4010\n",
      "2685\n",
      "830\n",
      "4203\n",
      "8331\n",
      "6834\n",
      "5236\n",
      "4727\n",
      "8278\n",
      "5952\n",
      "8231\n",
      "5352\n",
      "1287\n",
      "6983\n",
      "7276\n",
      "2025\n",
      "5313\n",
      "3975\n",
      "7097\n",
      "4023\n",
      "5306\n",
      "4832\n",
      "8204\n",
      "7559\n",
      "7276\n",
      "5339\n",
      "7314\n",
      "3712\n",
      "4700\n",
      "5076\n",
      "5788\n",
      "2832\n",
      "1351\n",
      "8188\n",
      "8239\n",
      "923\n",
      "4404\n",
      "3777\n",
      "4479\n",
      "5515\n",
      "8160\n",
      "901\n",
      "3047\n",
      "7383\n",
      "1458\n",
      "7382\n",
      "8166\n",
      "2121\n"
     ]
    }
   ],
   "source": [
    "#make empty lists to store information. For temperature, cloudiness, humidity, and wind_speed \n",
    "temp = []\n",
    "cloudiness = []\n",
    "humidity = []\n",
    "wind_speed = []\n",
    "latitudes = []\n",
    "city_name = []\n",
    "number = []\n",
    "\n",
    "#make a for loop to iterate through each of the cities\n",
    "for city in cities:\n",
    "    query_url = f\"http://api.openweathermap.org/data/2.5/weather?units=Imperial&APPID={api_key}&q={city}\"\n",
    "    response = requests.get(query_url)\n",
    "    response_json = response.json()\n",
    "    try:\n",
    "#         print(response_json['main']['temp'])\n",
    "#         print(response_json['wind']['speed'])\n",
    "#         print(response_json['clouds']['all'])\n",
    "#         print(response_json['main']['humidity'])\n",
    "        print(response_json['sys']['id'])\n",
    "        temp.append(response_json['main']['temp'])\n",
    "        cloudiness.append(response_json['clouds']['all'])\n",
    "        humidity.append(response_json['main']['humidity'])\n",
    "        wind_speed.append(response_json['wind']['speed'])\n",
    "        latitudes.append(response_json['coord']['lat'])\n",
    "        city_name.append(response_json['name'])\n",
    "        number.append(response_json['sys']['id'])\n",
    "    except: \n",
    "        continue\n",
    "        \n",
    "        \n",
    "    \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Half Moon Bay', 'Cape Town', 'Doha', 'Howell', 'Longyearbyen', 'Hilo', 'Punta Arenas', 'Bethel', 'Ilulissat', 'Fort Nelson', 'Souillac', 'Albany', 'Avarua', 'Praia da Vitoria', 'Kermanshah', 'Port Elizabeth', 'Yellowknife', 'Katsuura', 'Tuktoyaktuk', 'Ternate', 'Narsaq', 'Ushuaia', 'Bredasdorp', 'Ribeira Grande', 'Prince Rupert', 'Beira', 'Fairbanks', 'Broome', 'Klaksvik', 'Esperance', 'Cocobeach', 'Georgetown', 'Lompoc', 'Tasiilaq', 'Talcahuano', 'Vila Franca do Campo', 'Teya', 'Salalah', 'Grass Valley', 'Ukiah', 'Nelson Bay', 'Saint-Philippe', 'Bathsheba', 'Torbay', 'Jagodina', 'Riyadh', 'Saint George', 'Szentgotthard', 'Meadow Lake', 'Nikolskoye', 'Pacifica', 'Zevio', 'New Norfolk', 'Westerly', 'Sola', 'Thompson', 'Rosehearty', 'Bambous Virieux', 'Pangnirtung', 'Fortuna Foothills', 'Port Hawkesbury', 'Marand', 'Penzance', 'Mosquera', 'Arraial do Cabo', 'Casalpusterlengo', 'Hamilton', 'Roros', 'Kununurra', 'Teahupoo', 'Roald', 'Alice Springs', 'Constitucion', 'Elblag', 'Provideniya', 'Ahuimanu', 'Vila Velha', 'Hobart', 'Pisco', 'Victoria', 'Nara', 'Faya', 'Cabo San Lucas', 'San Cristobal', 'Seoul', 'Kapaa', 'Naze', 'Remontnoye', 'Norman Wells', 'Fergus Falls', 'Mahebourg', 'Havelock', 'Cavnic', 'Tiarei', 'Port Hardy', 'Boa Vista', 'Kankakee', 'Puerto Baquerizo Moreno', 'Havre-Saint-Pierre', 'Cascais', 'Acapulco', 'Shimoda', 'Plouzane', 'Hovd', 'Puerto Ayora', 'Scottsbluff', 'Lagoa', 'Nador', 'Eureka', 'Inuvik', 'Denpasar', 'Alofi', 'Mayo', 'Rovaniemi', 'General Roca', 'Lasa', 'Ortakoy', 'Bien Hoa', 'Dawson Creek', 'Olinda', 'Qaqortoq', 'La Asuncion', 'Salinas', 'Port Hedland', 'Praya', 'Neuquen', 'Geraldton', 'San Vicente', 'Neiafu', 'Clyde River', 'Kodiak', 'Yantarnyy', 'Tautira', 'San Matias', 'Skelleftea', 'Saint-Pierre', 'Barcelos', 'Marfino', 'Tecoanapa', 'Flin Flon', 'Lidkoping', 'College', 'Iqaluit', 'Kuantan', 'Subotica', 'Botwood', 'Pierre', 'Coihaique', 'Ketchikan', 'Senovo', 'Key West', 'Sao Gabriel da Cachoeira', 'Floro', 'Buraydah', 'Havoysund', 'Aklavik', 'Great Malvern', 'New Bern', 'Nisia Floresta', 'Segovia', 'Olga', 'Visby', 'Muros', 'Brae', 'Ninghai', 'Polyarnyy', 'Caraballeda', 'Rio Gallegos', 'Quatre Cocos', 'Mitsamiouli', 'Hasaki', 'Puerto Escondido', 'Mount Pleasant', 'Ewa Beach', 'Acajutla', 'Pangai', 'Port-Gentil', 'Mahon', 'San Cosme y Damian', 'Rakaia', 'Canico', 'Flinders', 'Zatoka', 'Nantucket', 'Jizan', 'Belyy Yar', 'Raton', 'Snasa', 'Laguna', 'Abu Dhabi', 'Viesca', 'Sorland', 'Grindavik', 'Adelaide', 'Fukue', 'Bograd', 'Tromso', 'Nizhnevartovsk', 'Sioux Lookout', 'Russell', 'Newport', 'Siniscola', 'West Wendover', 'Plaster Rock', 'Nhulunbuy', 'Port Macquarie', 'Lewiston', 'Santiago de Cao', 'Chapais', 'Sao Joao da Barra', 'Los Llanos de Aridane', 'Yulara', 'Storm Lake', 'Beckley', 'Gurlan', 'Niles', 'Murgab', 'Mareeba', 'Mount Vernon']\n"
     ]
    }
   ],
   "source": [
    "print(city_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature_fahrenheit</th>\n",
       "      <th>Cloud_Cover</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Wind_Speed_mph</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>City</th>\n",
       "      <th>City_Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>73.45</td>\n",
       "      <td>20</td>\n",
       "      <td>87</td>\n",
       "      <td>10.29</td>\n",
       "      <td>37.46</td>\n",
       "      <td>Half Moon Bay</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>57.20</td>\n",
       "      <td>75</td>\n",
       "      <td>82</td>\n",
       "      <td>18.34</td>\n",
       "      <td>-33.93</td>\n",
       "      <td>Cape Town</td>\n",
       "      <td>6529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>89.60</td>\n",
       "      <td>0</td>\n",
       "      <td>70</td>\n",
       "      <td>5.82</td>\n",
       "      <td>25.29</td>\n",
       "      <td>Doha</td>\n",
       "      <td>7171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>83.41</td>\n",
       "      <td>75</td>\n",
       "      <td>78</td>\n",
       "      <td>6.93</td>\n",
       "      <td>40.17</td>\n",
       "      <td>Howell</td>\n",
       "      <td>1965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>23.00</td>\n",
       "      <td>40</td>\n",
       "      <td>62</td>\n",
       "      <td>13.87</td>\n",
       "      <td>78.22</td>\n",
       "      <td>Longyearbyen</td>\n",
       "      <td>5326</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Temperature_fahrenheit  Cloud_Cover  Humidity  Wind_Speed_mph   Latitude  \\\n",
       "0                   73.45           20        87            10.29     37.46   \n",
       "1                   57.20           75        82            18.34    -33.93   \n",
       "2                   89.60            0        70             5.82     25.29   \n",
       "3                   83.41           75        78             6.93     40.17   \n",
       "4                   23.00           40        62            13.87     78.22   \n",
       "\n",
       "            City  City_Id  \n",
       "0  Half Moon Bay      392  \n",
       "1      Cape Town     6529  \n",
       "2           Doha     7171  \n",
       "3         Howell     1965  \n",
       "4   Longyearbyen     5326  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# temp = []\n",
    "# cloudiness = []\n",
    "# humidity = []\n",
    "# wind_speed = []\n",
    "#Convert lists into a data frame\n",
    "weather = pd.DataFrame(\n",
    "    {'Temperature_fahrenheit' : temp,\n",
    "     'Cloud_Cover' : cloudiness,\n",
    "     'Humidity' : humidity,  \n",
    "     'Wind_Speed_mph ' : wind_speed,  \n",
    "     'Latitude' : latitudes,\n",
    "     'City'     : city_name,\n",
    "     'City_Id'  : number\n",
    "        \n",
    "    \n",
    "    }\n",
    "\n",
    "\n",
    "\n",
    ")\n",
    "weather.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Latitude ')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#generate scatter plots\n",
    "# * Temperature (F) vs. Latitude\n",
    "\n",
    "x_axis= weather['Temperature_fahrenheit']\n",
    "    \n",
    "y_axis = weather['Latitude']\n",
    "\n",
    "#color =['red','blue','yellow']\n",
    "# count_type_size = [Urban_count_type,\n",
    "# Suburban_count_type,\n",
    "# Rural_count_type]\n",
    "#for x in range(3):\n",
    "plt.scatter(x_axis, y_axis, marker=\"o\",c= 'red', edgecolors=\"black\",\n",
    "    s=(50), alpha=0.5)\n",
    "plt.title(\"Temperature(F) VS Latitude 9/25/18\")\n",
    "plt.xlabel(\"Temperature (F)\")\n",
    "plt.ylabel(\"Latitude \")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate Cities List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# * Humidity (%) vs. Latitude\n",
    "\n",
    "x_axis2= weather['Humidity']\n",
    "    \n",
    "y_axis2 = weather['Latitude']\n",
    "\n",
    "\n",
    "plt.scatter(x_axis2, y_axis2, marker=\"o\",c= 'blue', edgecolors=\"black\",\n",
    "    s=(50), alpha=0.5)\n",
    "plt.title(\"Humidity(%)VSLatitude 9/25/18\")\n",
    "plt.xlabel(\"Humidity (%)\")\n",
    "plt.ylabel(\"Latitude \")\n",
    "plt.savefig(\"../Images/Humidity(%)VSLatitude.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perform API Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# * Cloudiness (%) vs. Latitude\n",
    "\n",
    "x_axis3= weather['Cloud_Cover']\n",
    "    \n",
    "y_axis3 = weather['Latitude']\n",
    "\n",
    "#color =['red','blue','yellow']\n",
    "# count_type_size = [Urban_count_type,\n",
    "# Suburban_count_type,\n",
    "# Rural_count_type]\n",
    "#for x in range(3):\n",
    "plt.scatter(x_axis3, y_axis3, marker=\"o\",c= 'grey', edgecolors=\"black\",\n",
    "    s=(50), alpha=0.5)\n",
    "plt.title(\"Cloudiness (%) Vs Latitude 9/25/18\")\n",
    "plt.xlabel(\"Cloudiness(%)\")\n",
    "plt.ylabel(\"Latitude \")\n",
    "plt.savefig(\"../Images/Cloudiness(%)VsLatitude.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# * Wind Speed (mph) vs. Latitude\n",
    "x_axis4= weather['Wind_Speed_mph ']\n",
    "    \n",
    "y_axis4 = weather['Latitude']\n",
    "\n",
    "#color =['red','blue','yellow']\n",
    "# count_type_size = [Urban_count_type,\n",
    "# Suburban_count_type,\n",
    "# Rural_count_type]\n",
    "#for x in range(3):\n",
    "plt.scatter(x_axis4, y_axis4, marker=\"o\",c= 'grey', edgecolors=\"black\",\n",
    "    s=(50), alpha=0.5)\n",
    "plt.title(\"Wind_Speed_mph Vs Latitude 9/25/18\")\n",
    "plt.xlabel(\"Wind_Speed_mph\")\n",
    "plt.ylabel(\"Latitude \")\n",
    "plt.savefig(\"../Images/Wind_Speed_mphVsLatitude.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<bound method DataFrame.to_csv of      Temperature_fahrenheit  Cloud_Cover  Humidity  Wind_Speed_mph   Latitude  \\\n",
      "0                     73.45           20        87            10.29     37.46   \n",
      "1                     57.20           75        82            18.34    -33.93   \n",
      "2                     89.60            0        70             5.82     25.29   \n",
      "3                     83.41           75        78             6.93     40.17   \n",
      "4                     23.00           40        62            13.87     78.22   \n",
      "5                     86.00           20        65            10.29     19.71   \n",
      "6                     48.20            0        39            13.87    -53.16   \n",
      "7                     48.02           90        89             3.36     60.79   \n",
      "8                     33.80           75        59            14.99     69.22   \n",
      "9                     51.80           75        53             5.82     58.81   \n",
      "10                    67.19            0        63             6.93     45.60   \n",
      "11                    78.35           75        66            19.46     42.65   \n",
      "12                    73.40           90        94             2.24    -21.21   \n",
      "13                    75.20           75        78            20.60     38.73   \n",
      "14                    68.00            0        16             4.70     34.32   \n",
      "15                    83.53           20        74            12.75     39.31   \n",
      "16                    33.80           75        55            21.92     62.45   \n",
      "17                    66.20           75        82            13.87     33.93   \n",
      "18                    30.20           75        74            16.11     69.44   \n",
      "19                    78.80           40       100            10.09     14.29   \n",
      "20                    39.20           40        55             2.24     60.91   \n",
      "21                    48.20           20        36             5.82    -54.81   \n",
      "22                    64.40           48        48            12.75    -34.53   \n",
      "23                    75.20           40        83            20.80     38.52   \n",
      "24                    53.60           90       100            11.41     54.32   \n",
      "25                    68.85            0        60             6.93     43.20   \n",
      "26                    47.82           75        76             7.18     64.84   \n",
      "27                    59.09            0        82             8.05     52.47   \n",
      "28                    46.40           92        87             2.24     62.23   \n",
      "29                    84.20           20        79             3.36     10.24   \n",
      "..                      ...          ...       ...              ...       ...   \n",
      "189                   88.66            0        66             3.36     24.47   \n",
      "190                   89.60           75        38             4.38     25.34   \n",
      "191                   41.00           75        65            27.51     67.67   \n",
      "192                   41.95           75        80             5.82     63.84   \n",
      "193                   55.40           40        82             5.82    -34.93   \n",
      "194                   64.40           75        93             8.05     35.03   \n",
      "195                   51.80           40        93             6.71     54.22   \n",
      "196                   41.00           75        86            39.15     69.65   \n",
      "197                   53.60            0        71            11.18     60.93   \n",
      "198                   47.50           75        65             5.82     50.10   \n",
      "199                   62.60           40        55            16.11    -33.01   \n",
      "200                   55.40            0        87             3.36     51.59   \n",
      "201                   57.20            0        82             3.36     40.57   \n",
      "202                   66.02            1         5             6.93     40.74   \n",
      "203                   71.06           75        81            13.87     46.91   \n",
      "204                   68.00           40        94            13.78    -12.18   \n",
      "205                   48.20           90       100             4.70    -31.43   \n",
      "206                   68.00            1        32             3.36     46.42   \n",
      "207                   66.20            0        77            10.29     -7.96   \n",
      "208                   42.80           90        87            16.11     49.78   \n",
      "209                   78.80            0        69            25.28    -21.64   \n",
      "210                   73.40            0        88            10.29     28.66   \n",
      "211                   51.80            0        25             5.82    -25.24   \n",
      "212                   64.62            1        31            11.41     42.64   \n",
      "213                   68.85           90        87             8.05     37.78   \n",
      "214                   57.99            0        54             6.93     41.84   \n",
      "215                   62.47           75        51             9.17     41.83   \n",
      "216                   66.20            0        45             2.24     37.50   \n",
      "217                   64.40           20        82            13.87    -16.99   \n",
      "218                   80.35           75        76             7.63     40.91   \n",
      "\n",
      "                      City  City_Id  \n",
      "0            Half Moon Bay      392  \n",
      "1                Cape Town     6529  \n",
      "2                     Doha     7171  \n",
      "3                   Howell     1965  \n",
      "4             Longyearbyen     5326  \n",
      "5                     Hilo      818  \n",
      "6             Punta Arenas     4642  \n",
      "7                   Bethel       28  \n",
      "8                Ilulissat     4805  \n",
      "9              Fort Nelson     3278  \n",
      "10                Souillac     5528  \n",
      "11                  Albany     2088  \n",
      "12                  Avarua     8340  \n",
      "13        Praia da Vitoria     5951  \n",
      "14              Kermanshah     7022  \n",
      "15          Port Elizabeth     1983  \n",
      "16             Yellowknife     3558  \n",
      "17                Katsuura     7584  \n",
      "18             Tuktoyaktuk     3555  \n",
      "19                 Ternate     7706  \n",
      "20                  Narsaq     4791  \n",
      "21                 Ushuaia     4651  \n",
      "22              Bredasdorp     6591  \n",
      "23          Ribeira Grande     5950  \n",
      "24           Prince Rupert     3326  \n",
      "25                   Beira     5474  \n",
      "26               Fairbanks       58  \n",
      "27                  Broome     5141  \n",
      "28                Klaksvik     5266  \n",
      "29               Esperance     4165  \n",
      "..                     ...      ...  \n",
      "189              Abu Dhabi     7097  \n",
      "190                 Viesca     4023  \n",
      "191                Sorland     5306  \n",
      "192              Grindavik     4832  \n",
      "193               Adelaide     8204  \n",
      "194                  Fukue     7559  \n",
      "195                 Bograd     7276  \n",
      "196                 Tromso     5339  \n",
      "197         Nizhnevartovsk     7314  \n",
      "198          Sioux Lookout     3712  \n",
      "199                Russell     4700  \n",
      "200                Newport     5076  \n",
      "201              Siniscola     5788  \n",
      "202          West Wendover     2832  \n",
      "203           Plaster Rock     1351  \n",
      "204              Nhulunbuy     8188  \n",
      "205         Port Macquarie     8239  \n",
      "206               Lewiston      923  \n",
      "207        Santiago de Cao     4404  \n",
      "208                Chapais     3777  \n",
      "209      Sao Joao da Barra     4479  \n",
      "210  Los Llanos de Aridane     5515  \n",
      "211                 Yulara     8160  \n",
      "212             Storm Lake      901  \n",
      "213                Beckley     3047  \n",
      "214                 Gurlan     7383  \n",
      "215                  Niles     1458  \n",
      "216                 Murgab     7382  \n",
      "217                Mareeba     8166  \n",
      "218           Mount Vernon     2121  \n",
      "\n",
      "[219 rows x 7 columns]>\n"
     ]
    }
   ],
   "source": [
    "weather_csv =weather.to_csv\n",
    "print(weather_csv)\n",
    "\n",
    "\n",
    "# * Save both a CSV of all data retrieved and png images for each scatter plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63.53191780821918"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "average_temp = weather['Temperature_fahrenheit'].mean()\n",
    "average_temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOL while scanning string literal (<ipython-input-21-dbb32504583c>, line 14)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-21-dbb32504583c>\"\u001b[0;36m, line \u001b[0;32m14\u001b[0m\n\u001b[0;31m    plt.ylabel('Temperature_fahrenheit'\")\u001b[0m\n\u001b[0m                                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"
     ]
    }
   ],
   "source": [
    "x_axis3= weather['Cloud_Cover']\n",
    "    \n",
    "y_axis3 = weather['Temperature_fahrenheit']\n",
    "\n",
    "#color =['red','blue','yellow']\n",
    "# count_type_size = [Urban_count_type,\n",
    "# Suburban_count_type,\n",
    "# Rural_count_type]\n",
    "#for x in range(3):\n",
    "plt.scatter(x_axis3, y_axis3, marker=\"o\",c= 'grey', edgecolors=\"black\",\n",
    "    s=(50), alpha=0.5)\n",
    "plt.title(\"Cloudiness (%) Vs Temperature(F) 9/25/18\")\n",
    "plt.xlabel(\"Cloudiness(%)\")\n",
    "plt.ylabel('Temperature_fahrenheit'\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
